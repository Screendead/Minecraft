package com.screendead.minedaft.mathematics;

public class Noise {
    private static int SEED;

    private static int SIZE = 4095;
    private static int YWRAPB = 4;
    private static int YWRAP = 1 << YWRAPB;
    private static int ZWRAPB = 8;
    private static int ZWRAP = 1 << ZWRAPB;

    private static float[] perlin = new float[SIZE + 1];

    static { seed(); }

    /**
     * Return a value generated by 1D Perlin Noise
     * @param x The X-component
     * @return The noise value
     */
    public static float perlin(float x) {
        return perlin(x, 0, 0);
    }

    /**
     * Return a value generated by 2D Perlin Noise
     * @param x The X-component
     * @param y The Y-component
     * @return The noise value
     */
    public static float perlin(float x, float y) {
        return perlin(x, y, 0);
    }

    /**
     * Return a value generated by 3D Perlin Noise
     * @param x The X-component
     * @param y The Y-component
     * @param z The Z-component
     * @return The noise value
     */
    public static float perlin(float x, float y, float z) {
        if (x < 0) x = -x;
        if (y < 0) y = -y;
        if (z < 0) z = -z;

        int xi = (int) Math.floor(x),
                yi = (int) Math.floor(y),
                zi = (int) Math.floor(z);
        float xf = x - xi,
                yf = y - yi,
                zf = z - zi;
        float rxf, ryf, r, amp1;

        return 0.0f;
    }

    /**
     * Set the noise seed to a random value
     */
    public static void seed() {
        seed(0);
    }

    /**
     * Set the noise seed
     * @param seed The new seed
     */
    public static void seed(int seed) {
        int m = Integer.MAX_VALUE,
                a = 1664525,
                c = 1013904223;
        int z = SEED = (seed == 0) ? (int) (Math.random() * m) : seed;

        for (int i = 0; i < perlin.length; i++) {
            z = (a * z + c) % m;
            perlin[i] = (float) z / (float) m;
        }
    }

    private static float scaled_cosine(float i) {
        return 0.5f * (1.0f - (float) Math.cos(i * (float) Math.PI));
    }
}
